Swift 

Why Swift
	Designed by apple but now open sourced
	Available for windows and linux too
	Better than python except in terms of third party libraries (for now)
	Even faster than C++ in many cases
		Can directly call C/C++ code

XCode Playgrounds
	import UIKit

	var str = "Hello, playground!"
	print(str)
	let now = Date()

Tutorial
	The Swift Programming Language (Swift 3)
		developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language
	The Swift Tour
	Includes Playground for all code

Caveat
	Assume proficiency in some OO languages e.g. C++, Java, python

Constants, Variables, & Types
	Constants (let) vs. variables (var)
	Types
		Basic types: Bool, Int, Float, Double, String
		Collection Types: Array, Set, Dictionary
		Tuples
			var shoppingList = ["coffee": 3, "candy": 4]
			for (item, amount) in shoppingList {
				print("\(item): \(amount)")
			}

Optionals
	Optional variables can be nil or hold a value

	let possibleStr: String? = "Hello" // optional type
	print(possibleStr) // outputs "Optional("Hello")"

	let forcedStr: String = possibleStr! // unwrapping
	print(forcedStr) // outputs "Hello"

	let assumedStr: String! = "Hello" // implicitly unwrapped

	let implicitStr: String = assumedStr // no need for !

Range Operators
	(a...b, a..<b)
	let count = 5
	for index in 1...count {
		print("\(index)") 		// 1 2 3 4 5
	}

Functions
	func fahrenheitToCelsius (temp: Float) -> Float {
		let tempC = (temp - 32.0) * 5.0 / 9.0
		return tempC
	}

	func printCelsius (temp tempF: Float) {
		let tempC = fahrenheitToCelsius(temp: tempF)
		print("\(tempF) F = \(tempC) C")
	}

	func printF2CTable (_ low: Int = -100, _ high : Int = 200) {
		for temp in low...high {
			printCelsius(temp: Float(temp))
		}
	}

Function Parameters
	Variadic Parameters
		func arithmeticMean (_ numbers: Double...) -> Double {

		}

	In-Out parameters (call by reference)
		func swapTwoInts (_ a: inout Int, _ b: inout Int) {
			let tempA = a
			a = b
			b = tempA
		}
		swapTwoInts(&a, &b)

Function Types
	func addTwoInts(_ a: Int, _ b: Int) -> Int {
		return a + b
	}

	var mathFunction: (Int, Int) -> Int = addTwoInts
	print("Result: \(mathFunction(2, 3))") // prints : "Result: 5"

	func printMathResult (_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int)  {
		print("Result: \(mathFunction(a, b))")
	}

	printMathResult(addTwoInts, 3, 5) // prints "Result: 8"

Closures
	Self-contained block of code
	Can capture references to variables in context
	General form:
		{ (parameters) -> return-type in 
			statements
		}

	Example:
		let names = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]

		func backward(_ s1: String, _ s2: String) -> Bool {
			return s1 > s2
		}

		var reversedNames = name.sorted(by: backward)

		reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in 
			return s1 > s2
		})

Closures: Capturing Values
	func makeIncrementer(forIncrement amount: Int) -> () -> Int {
		var runningTotal = 0
		func incrementer() -> Int {
			runningTotal += amount
			return runningTotal
		}
		return incrementer
	}

	let incrementByTen = makeIncrementer(forIncrement: 10)

	incrementByTen()	// returns a value of 10
	incrementByTen()	// return a value of 20
	incrementByTen()	// returns a value of 30

Escaping Closures
	Closure passed to function, but called after function returns

	var completionHandlers: [() -> Void] = []

	func someFunctionWithEscapingClosure (completionHandler: @escaping () -> Void) {
		completionHandlers.append(completionHandler)
	}





























